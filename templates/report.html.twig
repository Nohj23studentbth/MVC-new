{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Redovisningstexter för kursens kmom</h1>
    <h2 id="kmom01">Kmom01</h2>
    <p>Min tidigare erfarenhet av objektorienterad programmering kan sammanfattas som begränsad. Min erfarenhet från tidigare kurser har gett mig en förståelse, men jag har absolut mer att lära mig.<br><br>

    Där finns en objektorienterad programmeringsmodell där fokus ligger på att arbeta med objekt och deras tillhörande metoder. Centralt handlar det om skapandet av objekt utifrån klasser vilket kan
    jämföras som mallar för objektens beteende och struktur. Det krävs att man har förståelse för konstruktorer, inkapsling och hantering av klassers och objekts variabler.<br><br>

    Strukturen och kodbasen påminner mig mycket om tillvägagångssätt vi använde i PICO under designkursen och hur vi jobbade med Twig, samt vissa saker man kan minnas tillbaka i OOP kursen.
    Det har varit simpelt att följa uppgiften och skapa sidor, mallar och presentera information med hjälp av Symfony. Ramverket verkar även flexibelt.<br><br>

    Det var värdefullt att utforska artikeln “PHP The Right Way” då de intresserade mig i Coding Practices och Templating. Dessa områden har även varit relevanta i kursen
    och givit en viss klarhet. Det var dock mycket jag inte förstod, vilket jag hoppas lossnar under kursens gång!<br><br>

    Min TIL för detta kmom har varit att bekanta mig med ett nytt ramverk "Symfony".
    </p>
    <h2 id="kmom02">Kmom02</h2>
    <p>Arv innebär att en klass kan ärva en funktionalitet från en annan. Exempelvis så kan en subklass ärva från en basklass och kanske modifiera eller till och med utöka dess funktionalitet. 
    Ett exempel här är att CardGraphic som ärver från Card och utökar och ändrar detaljer.<br><br>
    Komposition menas med att en klass kan använda objekt från en annan klass. Exempelvis så i DeckOfCards använder objekt från klassen Card.<br><br>
    I trait är det koddelar som används från andra klasser utan ett arv. De innehåller funktionalitet som behövs i flera klasser, vilket gör koden mer återanvändbar.<br><br>
    Interface säkerställer man att en klass uppfyller ett krav. Då blir det möjligt att dela den funktionalitet mellan klasser. Det kan vara användbart när man inte känner till dess detaljer, så länge de följer interfacet.<br><br>

    Jag löste uppgiften med hjälp av föreläsningarna samt övningsuppgiften som gav mig en innblick på hur det är möjligt att lösa utan att ge mig för mycket. Men det gav mig ett mönster. Mycket handlade om att vara organiserad då man är i olika filer och jobbar och 
    filer som länkas samman hit och dit. Och hela tiden testa om det fungerar och så vidare. Jag är ganska nöjd. Hade dock kunnat vara ännu mer organiserad tror jag, samt stylea det snyggare. Jag tycker även att mitt hanterande av git har varit acceptabelt iallafall, men det är lätt att sväva iväg.<br><br>

    Jag tycker ändå strukturen är ganska smidig och lätt att förstå hur man ska dela upp det. Det är bara att fortsätta jobba på så man blir bekväm med att hoppa runt i de olika filerna. Ramverket känns naturligt helt enkelt.<br><br>

    TIL: återanvändning av tidigare twigfiler som man kan skriva om lite bara, samt att jobba med OOP vilket är kul men ganska svårt. Och sist men inte minst struktur och timemanagement...
    </p>
    <h2 id="kmom03">Kmom03</h2>
    <p>Att modellera ett kortspel med flödeskod tyckte jag bar en genialisk tanke. Att liksom få ner tankar på papper och struktur. Jag tar med mig detta att alltid kanske innan man börjar, att sätta sig ner och skissa på något först.<br><br>

    Jag har kämpat mycket med att återanvända filer och kod och då såklart klasser. Jag har gått efter förslaget och föreläsningarna vilket har gett en bra grund till uppgiften. Jag tycker ändå det slutade bra med hur koden "ligger" i filerna men att game21 filen står
    för den större delen av "logiken". Det som jag ser förbättring på är att jag har skrivit att spelaren ska ta två kort, men när spelaren har ett kort så kan den välja att stoppa... ajaj. Annars är jag suåernöjd.<br><br>

    Känslan är inte så oförändrad sen förra gången. Det är skönt att ha detta ramverk när allt är på plats liksom. Det är enkelt att visa upp sidor och felsöka och debugga.<br><br>

    TIL för den här gången har varit att återanvända klasser och jobba på filer som redan existerar. Man behöver inte alltid skapa nytt bara för det är en ny uppgift, utan mycket kan återanvändas. Och om en klass behöver något från en annan så kan man göra en metod för detta i en av klassen.
    <br></p>

    <h2 id="kmom04">Kmom04</h2>
    <p>PHPUNIT kändes ganska simpelt då jag har provat använda mocha och jest tidigare. Det är samma tänk, men lite annorlunda fortfarande. Det jobbiga var att få till miljön så jag kudne köra kommandot men det gick ändå smidigt tyckte jag! Det är alltid bra att testa sin kod,
    och det bästa hade varit att skriva tester genom alla kmom. Nu förstår jag att det inte är möjligt men jag tycker att momentet kommer bra i kursen och ger en bra början till testing.<br><br>

    Jag lyckade komma över 90%, eller runt 90%. Däremot tog det tid och man fick sitta och pilla lite. Men jag tror att det gick okej i slutändan.<br><br>

    Man kan alltid refaktorera osv. Det jag tyckte var pilligast var att försöka komma ihåg vad koden gör och därför är det bra att kommentera sin egna kod. Det är lätt hänt att när man är i många filer samtidigt så tappar man bort sig själv.<br><br>

    Jag valde att inte skriva om min kod, jag försökte istället anpassa testerna då jag vet att min kod fungerar som jag vill. Men såklart när man skriver kod och tester samtidigt i samma "process" är det nog bra att göra det.<br><br>

    När det kommer till snygg och ren kod så täbnker jag att det är viktigt att behålla enkelheten i koden. Alltså det ska vara lätt att förstå för en själv och som jag nämde innan kan det bli jobbigt när man pillar i olika filer. Helt enkelt
    läsbar kod. Välj ett sätt att skriva din kod och håll dig till det, annars kan man lätt flyta iväg och tappa bort sig själv. Inte vara överkomplicerad helt enkelt<br><br>

    TIL för det här momentet har varit att grotta ner sig i mer testing. Även fast jag sysslat lite med det tidigare så har jag inte användt PHPUNIT, så det är kul att fått göra det och lägga det i ryggsäcken.
    </p>


{% endblock %}